#!/bin/sh
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.

# flash based storage does not need scheduling
if [ -d /sys/block/mmcblk0 ] || [ -d /sys/block/mmcblk1 ] || [ -d /sys/block/mmcblk2 ]; then
  for i in /sys/block/mmcblk?/queue/scheduler; do
    # older and newer kernel differ here: old noop, new none
    grep -q none $i
    if [ "$?" = "0" ]; then
      echo none > $i
    else
      echo noop > $i
    fi
  done
fi
if [ -d /sys/block/sda ] || [ -d /sys/block/sdb ] || [ -d /sys/block/sdc ]; then
  for i in /sys/block/sd?/queue/scheduler; do
    # older and newer kernel differ here: old noop, new none
    grep -q none $i
    if [ "$?" = "0" ]; then
      echo none > $i
    else
      echo noop > $i
    fi
  done
fi

# do the zswap setup only if zswap is around
if [ -f /sys/module/zswap/parameters/enabled ]; then
  # do some low memory optimization by using zswap memory compression
  echo zstd > /sys/module/zswap/parameters/compressor 
  # zmalloc is definitely required here for 32bit armv7l systems as
  # the other two options zbud and z3fold can not work properly with
  # memory above 1gb on many of those systems as they cannot allocate
  # from himem - besides that zsmalloc also allows the highest
  # compression ratio (larger than 1:3) for the compressed memory 
  echo zsmalloc > /sys/module/zswap/parameters/zpool
  # default is 20, less means less compressed memory and less cpu usage
  # for compression, more is the other way around, depends on actual hw
  # with 20 there is a 25-30% win on available memory with a typical
  # usual compression ratio of around 1:3, but only compressed pages
  # are written to the swap space and thus io to emmc/sd is reduced
  # which should be good for the emmc/sd life time as well - this seems
  # to be some kind of a sweet spot for running low performance systems
  # for a longer time without being busy compressing/decompressing the
  # memory all the time ... in some situations up to 35 might be ok, it
  # should be easier to raise the percentage the faster the cpu cores
  # are, the more of them are available and the more physical memory is
  # in the system ... it is a good idea to set the size of the swap
  # space to about 150-200% of the physical memory if enough disk space
  # is available (otherwise 100% is ok too if disk space is short) as
  # with zswap the used swap space is partially counted virtually twice
  # for the compressed memory pages and extra the ones actually swapped
  # out to disk (i.e. not really all shown amount of used swap space is
  # really used on disk, but shown this way to user space tools
  echo 20 > /sys/module/zswap/parameters/max_pool_percent
  echo 1 > /sys/module/zswap/parameters/enabled
fi

# if the mglru patches are in place, then setting this is some kind of
# thrashing prevention for interactive use - if the system cannot keep
# all actively used processes of the last n milliseconds in memory it
# will start killing hopefully less important procceses using the kernel
# oom killer - default is 1s (=1000ms) and for now lets better keep this
# off by default
#if [ -f /sys/kernel/mm/lru_gen/min_ttl_ms ]; then
#  echo 1000 > /sys/kernel/mm/lru_gen/min_ttl_ms
#fi

# see: https://forum.armbian.com/topic/20018-mglru-patches-to-bring-down-kswapd-cpu-usage/?do=findComment&comment=141847
if [ -f /proc/sys/vm/watermark_boost_factor ]; then
  echo 0 > /proc/sys/vm/watermark_boost_factor
fi

# ... and offer an option to disable mglru as this functionality is
# enabled by default if they are in use with the default kernel config
# used
#if [ -f /sys/kernel/mm/lru_gen/enabled ]; then
#  echo 0 > /sys/kernel/mm/lru_gen/enabled
#fi

# optionally enable the schedutil governor for cpu freq scaling if available
#if [ -f /sys/devices/system/cpu/cpufreq/policy0/scaling_available_governors ]; then
#  grep -q schedutil /sys/devices/system/cpu/cpufreq/policy0/scaling_available_governors
#  if [ "$?" = "0" ]; then
#    for policy in /sys/devices/system/cpu/cpufreq/policy?; do
#      echo schedutil > $policy/scaling_governor
#    done
#  fi
#fi

# kernels from at least v6.2 to v6.6 seem to only enable zswap after an extra
# swapon in case the kernel default is to have zswap disabled - so lets do a
# quick swapoff and swapon cycle to make sure the zswap really gets enabled
#swapoff -a
#swapon -a

# enable light supend mode, i.e. only cpu is put into sleep, everything else stays alive
#echo s2idle > /sys/power/mem_sleep

# try to copy the right xorg monitor rotation conf file depending on system at first boot
# as a result the wrong screen orientation should be corrected after the first reboot on krane
if [ ! -f /etc/X11/xorg.conf.d/31-monitor-rotate-left.conf ] && [ ! -f /etc/X11/xorg.conf.d/31-monitor.conf ]; then
  # krane has a rotated panel
  if $(grep -q 'MediaTek krane' /proc/device-tree/model) || \
     $(grep -q 'MediaTek kakadu board$' /proc/device-tree/model) || \
     $(grep -q 'MediaTek katsu board$' /proc/device-tree/model) || \
     $(grep -q 'MediaTek katsu sku38 board$' /proc/device-tree/model) ; then
    cp /etc/X11/xorg.conf.d.samples/31-monitor-rotate-left.conf /etc/X11/xorg.conf.d
    sync
    reboot
  # most others do not have a rotated panel
  else
    cp /etc/X11/xorg.conf.d.samples/31-monitor.conf /etc/X11/xorg.conf.d
  fi
fi

# this is no longer required since v5.18 and a patch added for it
## lock the gpu devfreq freq scaling to a single fixed freq as it does not seem to work stable
## resulting in gpu errors like "gpu sched timeout", "AS_ACTIVE bit stuck" or page faults
## see: https://oftc.irclog.whitequark.org/panfrost/2022-01-09#30513966
#if [ -f /sys/class/devfreq/13040000.gpu/max_freq ]; then
#  # for possible values see /sys/class/devfreq/13040000.gpu/available_frequencies
#  echo 400000000 > /sys/class/devfreq/13040000.gpu/max_freq
#  echo 400000000 > /sys/class/devfreq/13040000.gpu/min_freq
#fi

# additions for chromebook_kukui

# enable light supend mode, i.e. only cpu is put into sleep, everything else stays alive
#echo s2idle > /sys/power/mem_sleep

# try to copy the right xorg monitor rotation conf file depending on system at first boot
# as a result the wrong screen orientation should be corrected after the first reboot on krane
if [ ! -f /etc/X11/xorg.conf.d/31-monitor-rotate-left.conf ] && [ ! -f /etc/X11/xorg.conf.d/31-monitor.conf ]; then
  # krane has a rotated panel
  if $(grep -q 'MediaTek krane' /proc/device-tree/model) || \
     $(grep -q 'MediaTek kakadu board$' /proc/device-tree/model) || \
     $(grep -q 'MediaTek katsu board$' /proc/device-tree/model) || \
     $(grep -q 'MediaTek katsu sku38 board$' /proc/device-tree/model) ; then
    cp /etc/X11/xorg.conf.d.samples/31-monitor-rotate-left.conf /etc/X11/xorg.conf.d
    sync
    reboot
  # most others do not have a rotated panel
  else
    cp /etc/X11/xorg.conf.d.samples/31-monitor.conf /etc/X11/xorg.conf.d
  fi
fi

# this is no longer required since v5.18 and a patch added for it
## lock the gpu devfreq freq scaling to a single fixed freq as it does not seem to work stable
## resulting in gpu errors like "gpu sched timeout", "AS_ACTIVE bit stuck" or page faults
## see: https://oftc.irclog.whitequark.org/panfrost/2022-01-09#30513966
#if [ -f /sys/class/devfreq/13040000.gpu/max_freq ]; then
#  # for possible values see /sys/class/devfreq/13040000.gpu/available_frequencies
#  echo 400000000 > /sys/class/devfreq/13040000.gpu/max_freq
#  echo 400000000 > /sys/class/devfreq/13040000.gpu/min_freq
#fi

# load the proper audio modules per system
# (for all tested systems and the ones with the identical audio setup)
# the modprobe part should be no longer required with some additional
# patches in the v6.1 kernels, but lets still leave them here for now
touch /tmp/no-audio-setup-done
# some krane, jacuzzi and kodama systems require this audio setup
if $(grep -q 'MediaTek krane sku0 board$' /proc/device-tree/model) || \
   $(grep -q 'MediaTek krane sku176 board$' /proc/device-tree/model) || \
   $(grep -q 'Google burnet board$' /proc/device-tree/model) || \
   $(grep -q 'Google cozmo board$' /proc/device-tree/model) || \
   $(grep -q 'Google juniper sku16 board$' /proc/device-tree/model) || \
   $(grep -q 'Google kappa board$' /proc/device-tree/model) || \
   $(grep -q 'Google kenzo sku17 board$' /proc/device-tree/model) || \
   $(grep -q 'Google willow board sku1$' /proc/device-tree/model) || \
   $(grep -q 'Google fennel sku7 board$' /proc/device-tree/model) || \
   $(grep -q 'MediaTek kodama sku16 board$' /proc/device-tree/model) || \
   $(grep -q 'MediaTek kodama sku272 board$' /proc/device-tree/model) || \
   $(grep -q 'MediaTek kodama sku288 board$' /proc/device-tree/model) || \
   $(grep -q 'MediaTek kodama sku32 board$' /proc/device-tree/model) ; then
  modprobe mt8183-mt6358-ts3a227-max98357
  rm -f /tmp/no-audio-setup-done
fi
# some fennel and kakadu systems require this audio setup
if $(grep -q 'Google fennel sku1 board$' /proc/device-tree/model) || \
   $(grep -q 'Google fennel sku6 board$' /proc/device-tree/model) || \
   $(grep -q 'Google fennel14 sku0 board$' /proc/device-tree/model) || \
   $(grep -q 'MediaTek kakadu board$' /proc/device-tree/model) ; then
  modprobe mt8183-da7219-max98357
  alsaucm -n -b - <<EOM
  open mt8183_da7219_r
  reset
  set _verb HiFi
  set _enadev Speaker
EOM
  rm -f /tmp/no-audio-setup-done
fi
# some damu and willow systems require this audio setup
if $(grep -q 'Google damu board$' /proc/device-tree/model) || \
   $(grep -q 'Google willow board sku0$' /proc/device-tree/model) ; then
  modprobe mt8183-da7219-max98357
  alsaucm -n -b - <<EOM
  open mt8183_da7219_m
  reset
  set _verb HiFi
  set _enadev Speaker
  set _enadev InternalMic
EOM
  rm -f /tmp/no-audio-setup-done
fi

